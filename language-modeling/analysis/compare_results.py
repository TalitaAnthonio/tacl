import json 

path_to_finetuned_context = "correct_cases_dev_finetuned_context.json"
path_to_finetuned = "correct_cases_dev_finetuned.json"


with open("../results-on-dev-set-finetuned-reranked.json", "r") as json_in: 
     reranked_using_sentence = json.load(json_in)


with open(path_to_finetuned_context, "r") as json_in1: 
     finetuned_context = json.load(json_in1)
    
with open(path_to_finetuned, "r") as json_in2: 
     finetuned = json.load(json_in2)


def compare_sets(finetuned_context, finetuned): 
    finetuned_filtered = {}
    for key, _ in finetuned.items(): 
        if key in finetuned_context.keys(): 
           finetuned_filtered[key] = finetuned[key]
    return finetuned_filtered



def show_perplexity(sequences, revised_untill_insertion, revised_after_insertion): 
    # everything up to the insertion 
    sequences = [elem.lstrip() for elem in sequences]
    for position, generated_sequence in enumerate(sequences, 1): 
        print("position", position)
        full_sequence_with_generated_insertion = "{0} {1} {2}".format(revised_untill_insertion, generated_sequence.lstrip(), revised_after_insertion)
        print(full_sequence_with_generated_insertion)
        if position > 10: 
           print("=========================================")
           break 
           




def main(): 
    not_in_context = compare_sets(finetuned_context, finetuned)
    """
    for key, _ in finetuned_context.items(): 
        predictions = finetuned_context[key]["generated_text_perplexity_context"]
        revised_untill_insertion = finetuned_context[key]['par'].rstrip('\n') + finetuned_context[key]['revised_untill_insertion']
        if 'revised_after_insertion' not in finetuned_context[key].keys(): 
            revised_after_insertion = finetuned_context[key]['revised_afer_insertion']
        else: 
            revised_after_insertion = finetuned_context[key]['revised_after_insertion']
        
        print(predictions)
        show_perplexity(predictions, revised_untill_insertion, revised_after_insertion)

    print(len(finetuned_context.keys()))
    print(len(finetuned.keys()))
    print(len(not_in_context.keys()))
    """

    counter = 0 
    for key, _ in finetuned.items(): 
        counter +=1 

        if key in finetuned_context.keys(): 
            print(counter)
           
            generated_context = finetuned_context[key]["generated_text_perplexity_context"][0:10]
            generated_normal = finetuned[key]['predictions']['generated_texts'][0:10]
            
            correct_reference = finetuned[key]['reference']
            print(finetuned[key]['par'])
            print('revised sentence', finetuned[key]['revised_sentence'])
            print("generated using context", generated_context)
    
            
            print("generated by normal", generated_normal)
            print("generated by sentence", reranked_using_sentence[key]['generated_text_perplexity'][0:10])
            print("correct reference", correct_reference)
            print("top 100:", finetuned[key]['predictions']['generated_texts'])
            print("=====================================")

    #print(len(finetuned_context.keys()))
    #print(len(finetuned.keys()))
    #print(len(not_in_context.keys()))

main()